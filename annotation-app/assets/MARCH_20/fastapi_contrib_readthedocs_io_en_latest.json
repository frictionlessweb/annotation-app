{"title":"fastapi_contrib_readthedocs_io_en_latest","questions":{"topicTask":[{"id":0,"text":"FastAPI Contrib"},{"id":1,"text":"Installation"},{"id":2,"text":"Auto-creation of MongoDB indexes"},{"id":3,"text":"Token"},{"id":4,"text":"User"}],"questionTask":[{"id":5,"text":"What is the purpose of fastapi_contrib and how can it be installed?"},{"id":10,"text":"How does fastapi_contrib handle the creation of MongoDB indexes?"},{"id":15,"text":"What are some examples of helper functions provided by fastapi_contrib?"}],"statementsTask":[{"id":7,"text":"FastAPI Contrib is a library that provides additional functionality and tools for FastAPI. It includes features such as authentication, rate limiting, and database integration. It can be installed using pip by running \"pip install fastapi_contrib\". The library also includes configuration options that can be set using a configuration file or environment variables. Overall, the purpose of FastAPI Contrib is to extend the capabilities of FastAPI and make it easier to build web applications.\n\nSources:\n[0] fastapi_contrib\n[1] fastapi_contrib\n[2] fastapi_contrib\n[3] FastAPI Contrib\n[4] fastapi_contrib.conf\n[5] fastapi_contrib.conf","system":"gpt_retrieval"},{"id":9,"text":"The purpose of fastapi_contrib is to provide a set of utilities and integrations on top of FastAPI, including auto-creation of MongoDB indexes [1], an auth backend and middleware [2], reusable class permissions [3], and custom exceptions and exception handlers [4]. It also includes middleware to store Request ID headers value inside request’s state object [5], a singleton client for interacting with MongoDB [6], and a base model for serializers [7]. Fastapi_contrib can be installed using pip, with different options for different integrations. For example, to install just Contrib without MongoDB, pytz, or ujson, one can use the command \"pip install fastapi_contrib[mongo]\" [8]. To install contrib with opentracing and Jaeger tracer, one can use \"pip install fastapi_contrib[all]\" [9]. The package is licensed under the MIT license [10]. To install fastapi_contrib, one can install their local copy into a virtualenv [11].\n\nSources:\n[1] Auto-creation of MongoDB indexes\n[2] Auth Backend & Middleware (User or None in every request object)\n[3] Permissions: reusable class permissions, specify multiple as FastAPI Dependency\n[4] Custom Exceptions and Custom Exception Handlers\n[5] Middleware to store Request ID headers value inside request’s state object.\n[6] Singleton client for interacting with MongoDB.\n[7] class fastapi_contrib.serializers.common.Serializer Bases: pydantic.main.BaseModel\n[8] To install just Contrib (without mongodb, pytz, ujson):\n[9] To install contrib with opentracing & Jaeger tracer:\n[10] Free software: MIT license\n[11] Install your local copy into a virtualenv."},{"id":12,"text":"Fastapi_contrib handles the creation of MongoDB indexes through the use of the create_indexes() method. This method is available in both the fastapi_contrib.db.models.MongoDBModel class and the fastapi_contrib.db.utils module. The create_indexes() method is an asynchronous function that returns a list of strings. The setup_mongodb() function from the fastapi_contrib.db.utils module is also involved in setting up the MongoDB connection. The fastapi_contrib.db package contains both the models and utils modules.\n\nSources:\n[0] from fastapi_contrib.db.utils import setup_mongodb, create_indexes\n[1] create_indexes() (fastapi_contrib.db.models.MongoDBModel class method), (<>)23\n[2] create_indexes() (in module fastapi_contrib.db.utils), (<>)24\n[3] async fastapi_contrib.db.utils.create_indexes() → List[str]\n[4] fastapi_contrib.db.models.MongoDBModel\n[5] fastapi_contrib.db.utils\n[6] fastapi_contrib.db.utils\n[7] (fastapi_contrib.db.models.MongoDBModel\n[8] fastapi_contrib.db","system":"gpt_retrieval"},{"id":14,"text":"Fastapi_contrib provides a method called `create_indexes()` which scans all the specified CONTRIB_APPS in the CONTRIB_APPS_FOLDER_NAME for models that are sub-classed from either MongoDBModel or MongoDBTimeStampedModel and creates indices for any of them that has Meta class with indexes attribute [1] [2] [3] [4]. The `create_indexes()` method is defined in the `fastapi_contrib.db.utils` module [5] [6].\n\nSources:\n[1] This will scan all the specified CONTRIB_APPS in the CONTRIB_APPS_FOLDER_NAME for models, that are sub-classed from either MongoDBModel or MongoDBTimeStampedModel and create indices for any of them that has Meta class with indexes attribute:\n[2] This will scan all the specified CONTRIB_APPS in the CONTRIB_APPS_FOLDER_NAME for models, that are sub-classed from either MongoDBModel or MongoDBTimeStampedModel and create indices for any of them that has Meta class with indexes attribute:\n[3] async fastapi_contrib.db.utils.create_indexes() → List[str]\n[4] Gets all models in project and then creates indexes for each one of them.\n[5] async fastapi_contrib.db.utils.create_indexes() → List[str]\n[6] create_indexes() (in module fastapi_contrib.db.utils), (<>)24"},{"id":17,"text":"FastAPI Contrib provides several helper functions, including but not limited to: `fastapi_contrib.conf.settings`, which allows for easy configuration of settings; `fastapi_contrib.pagination.paginate`, which provides pagination support for endpoints; and `fastapi_contrib.logging.configure_logging`, which simplifies logging configuration. Other helper functions include `fastapi_contrib.security.cors`, which provides Cross-Origin Resource Sharing (CORS) support, and `fastapi_contrib.security.api_key`, which provides API key authentication.\n\nSources:\n[0] fastapi_contrib\n[1] fastapi_contrib","system":"gpt_retrieval"},{"id":19,"text":"fastapi_contrib provides a variety of helper functions, including auto-creation of MongoDB indexes [1], custom exceptions and custom exception handlers [2], limit-offset pagination [3], defining and using custom permissions based on FastAPI Dependency framework [4], and getting the instance of MongoDB client for making DB queries [5]. Additionally, fastapi_contrib provides helper functions for setting up MongoDB connection and motor client [6], generating IDs for newly created MongoDB rows [7], and retrieving FastAPI app instance from the path specified in project's conf [8].\n\nSources:\n[1] Auto-creation of MongoDB indexes\n[2] Custom Exceptions and Custom Exception Handlers\n[3] Limit-Offset Pagination: use it as FastAPI Dependency (works only with ModelSerializers for now)\n[4] Define & use custom permissions based on FastAPI Dependency framework:\n[5] Gets instance of MongoDB client for you to make DB queries.\n[6] fastapi_contrib.db.utils.setup_mongodb(app: fastapi.applications.FastAPI) → None Helper function to setup MongoDB connection & motor client during setup.\n[7] fastapi_contrib.db.utils.default_id_generator(bit_size: int = 32) → int Generator of IDs for newly created MongoDB rows.\n[8] fastapi_contrib.common.utils.get_current_app() → fastapi.applications.FastAPI Retrieves FastAPI app instance from the path, specified in project’s conf."}],"qaTask":[{"id":6,"question":"What is the purpose of fastapi_contrib and how can it be installed?","answer":"FastAPI Contrib is a library that provides additional functionality and tools for FastAPI. It includes features such as authentication, rate limiting, and database integration. It can be installed using pip by running \"pip install fastapi_contrib\". The library also includes configuration options that can be set using a configuration file or environment variables. Overall, the purpose of FastAPI Contrib is to extend the capabilities of FastAPI and make it easier to build web applications.\n\nSources:\n[0] fastapi_contrib\n[1] fastapi_contrib\n[2] fastapi_contrib\n[3] FastAPI Contrib\n[4] fastapi_contrib.conf\n[5] fastapi_contrib.conf","system":"gpt_retrieval"},{"id":8,"question":"What is the purpose of fastapi_contrib and how can it be installed?","answer":"The purpose of fastapi_contrib is to provide a set of utilities and integrations on top of FastAPI, including auto-creation of MongoDB indexes [1], an auth backend and middleware [2], reusable class permissions [3], and custom exceptions and exception handlers [4]. It also includes middleware to store Request ID headers value inside request’s state object [5], a singleton client for interacting with MongoDB [6], and a base model for serializers [7]. Fastapi_contrib can be installed using pip, with different options for different integrations. For example, to install just Contrib without MongoDB, pytz, or ujson, one can use the command \"pip install fastapi_contrib[mongo]\" [8]. To install contrib with opentracing and Jaeger tracer, one can use \"pip install fastapi_contrib[all]\" [9]. The package is licensed under the MIT license [10]. To install fastapi_contrib, one can install their local copy into a virtualenv [11].\n\nSources:\n[1] Auto-creation of MongoDB indexes\n[2] Auth Backend & Middleware (User or None in every request object)\n[3] Permissions: reusable class permissions, specify multiple as FastAPI Dependency\n[4] Custom Exceptions and Custom Exception Handlers\n[5] Middleware to store Request ID headers value inside request’s state object.\n[6] Singleton client for interacting with MongoDB.\n[7] class fastapi_contrib.serializers.common.Serializer Bases: pydantic.main.BaseModel\n[8] To install just Contrib (without mongodb, pytz, ujson):\n[9] To install contrib with opentracing & Jaeger tracer:\n[10] Free software: MIT license\n[11] Install your local copy into a virtualenv."},{"id":11,"question":"How does fastapi_contrib handle the creation of MongoDB indexes?","answer":"Fastapi_contrib handles the creation of MongoDB indexes through the use of the create_indexes() method. This method is available in both the fastapi_contrib.db.models.MongoDBModel class and the fastapi_contrib.db.utils module. The create_indexes() method is an asynchronous function that returns a list of strings. The setup_mongodb() function from the fastapi_contrib.db.utils module is also involved in setting up the MongoDB connection. The fastapi_contrib.db package contains both the models and utils modules.\n\nSources:\n[0] from fastapi_contrib.db.utils import setup_mongodb, create_indexes\n[1] create_indexes() (fastapi_contrib.db.models.MongoDBModel class method), (<>)23\n[2] create_indexes() (in module fastapi_contrib.db.utils), (<>)24\n[3] async fastapi_contrib.db.utils.create_indexes() → List[str]\n[4] fastapi_contrib.db.models.MongoDBModel\n[5] fastapi_contrib.db.utils\n[6] fastapi_contrib.db.utils\n[7] (fastapi_contrib.db.models.MongoDBModel\n[8] fastapi_contrib.db","system":"gpt_retrieval"},{"id":13,"question":"How does fastapi_contrib handle the creation of MongoDB indexes?","answer":"Fastapi_contrib provides a method called `create_indexes()` which scans all the specified CONTRIB_APPS in the CONTRIB_APPS_FOLDER_NAME for models that are sub-classed from either MongoDBModel or MongoDBTimeStampedModel and creates indices for any of them that has Meta class with indexes attribute [1] [2] [3] [4]. The `create_indexes()` method is defined in the `fastapi_contrib.db.utils` module [5] [6].\n\nSources:\n[1] This will scan all the specified CONTRIB_APPS in the CONTRIB_APPS_FOLDER_NAME for models, that are sub-classed from either MongoDBModel or MongoDBTimeStampedModel and create indices for any of them that has Meta class with indexes attribute:\n[2] This will scan all the specified CONTRIB_APPS in the CONTRIB_APPS_FOLDER_NAME for models, that are sub-classed from either MongoDBModel or MongoDBTimeStampedModel and create indices for any of them that has Meta class with indexes attribute:\n[3] async fastapi_contrib.db.utils.create_indexes() → List[str]\n[4] Gets all models in project and then creates indexes for each one of them.\n[5] async fastapi_contrib.db.utils.create_indexes() → List[str]\n[6] create_indexes() (in module fastapi_contrib.db.utils), (<>)24"},{"id":16,"question":"What are some examples of helper functions provided by fastapi_contrib?","answer":"FastAPI Contrib provides several helper functions, including but not limited to: `fastapi_contrib.conf.settings`, which allows for easy configuration of settings; `fastapi_contrib.pagination.paginate`, which provides pagination support for endpoints; and `fastapi_contrib.logging.configure_logging`, which simplifies logging configuration. Other helper functions include `fastapi_contrib.security.cors`, which provides Cross-Origin Resource Sharing (CORS) support, and `fastapi_contrib.security.api_key`, which provides API key authentication.\n\nSources:\n[0] fastapi_contrib\n[1] fastapi_contrib","system":"gpt_retrieval"},{"id":18,"question":"What are some examples of helper functions provided by fastapi_contrib?","answer":"fastapi_contrib provides a variety of helper functions, including auto-creation of MongoDB indexes [1], custom exceptions and custom exception handlers [2], limit-offset pagination [3], defining and using custom permissions based on FastAPI Dependency framework [4], and getting the instance of MongoDB client for making DB queries [5]. Additionally, fastapi_contrib provides helper functions for setting up MongoDB connection and motor client [6], generating IDs for newly created MongoDB rows [7], and retrieving FastAPI app instance from the path specified in project's conf [8].\n\nSources:\n[1] Auto-creation of MongoDB indexes\n[2] Custom Exceptions and Custom Exception Handlers\n[3] Limit-Offset Pagination: use it as FastAPI Dependency (works only with ModelSerializers for now)\n[4] Define & use custom permissions based on FastAPI Dependency framework:\n[5] Gets instance of MongoDB client for you to make DB queries.\n[6] fastapi_contrib.db.utils.setup_mongodb(app: fastapi.applications.FastAPI) → None Helper function to setup MongoDB connection & motor client during setup.\n[7] fastapi_contrib.db.utils.default_id_generator(bit_size: int = 32) → int Generator of IDs for newly created MongoDB rows.\n[8] fastapi_contrib.common.utils.get_current_app() → fastapi.applications.FastAPI Retrieves FastAPI app instance from the path, specified in project’s conf."},{"id":20,"question":"What is the difference between `def` and `async def`?","answer":"`def` is used to define a synchronous function, while `async def` is used to define an asynchronous function. An asynchronous function can be paused during its execution to allow other code to run, while a synchronous function will block the execution until it is finished. Asynchronous functions are typically used in I/O-bound operations, where the function can yield control to other code while waiting for I/O operations to complete.\n\nSources:\n[0] async def startup():\n[1] async def startup():\n[2] async def startup():"},{"id":21,"question":"What is the difference between `def` and `async def`?","answer":"The sources do not provide information on the difference between `def` and `async def`.\n\nSources:"},{"id":22,"question":"How do I handle CORS requests?","answer":"There is no clear answer to the question of how to handle CORS requests based on the given sources. However, there are some relevant sources that can provide some insight. \n\nSources 1 and 2 suggest that CORS requests can be handled by making requests to a different domain. Source 1 specifically mentions that CORS requests can be made by using the `Request` class from the `lette.requests` module. \n\nSource 4 mentions an HTTPConnection object that is part of the current request-response cycle. This object could potentially be used to handle CORS requests, although it is not clear how exactly it would be used. \n\nSource 9 provides a function called `dispatch` that takes a `Request` object and a `call_next` argument. This function appears to be related to handling requests, although it is not clear how it specifically relates to CORS requests. \n\nOverall, the sources do not provide a clear answer to the question of how to handle CORS requests.\n\nSources:\n[0] lette.requests.Request, exc:\n[1] lette.requests.Request\n[2] conn – HTTPConnection of the current request-response cycle"},{"id":23,"question":"How do I handle CORS requests?","answer":"The sources provided do not contain information on how to handle CORS requests.\n\nSources:"},{"id":24,"question":"How do I contribute to FastAPI?","answer":"To contribute to FastAPI, one can use FastAPI Contrib, which is a set of utilities and tools built on top of FastAPI. FastAPI Contrib can be set up for local development by following the instructions provided in source 3. The sources for FastAPI Contrib can be downloaded from the GitHub repository mentioned in source 4. The roadmap for FastAPI Contrib can be found in the GitHub project mentioned in source 5. One can also contribute to FastAPI directly by submitting pull requests or opening issues on the FastAPI GitHub repository.\n\nSources:\n[0] Here’s how to set up fastapi_contrib for local development.\n[1] The sources for FastAPI Contrib can be downloaded from the (<https://github.com/l@datacorp.ee/fastapi_contrib>)Github repo."},{"id":25,"question":"How do I contribute to FastAPI?","answer":"To contribute to FastAPI, you can fork the fastapi_contrib repository on GitHub [1]. After making changes, submit a pull request through the GitHub website [2]. Before submitting a pull request, make sure it meets the guidelines listed in the repository [3]. To report bugs or send feedback, file an issue at https://github.com/identixone/fastapi_contrib/issues [4] [5]. The roadmap for FastAPI can be found at https://github.com/identixone/fastapi_contrib/projects/2 [6].\n\nSources:\n[1] Fork the fastapi_contrib repo on GitHub.\n[2] Submit a pull request through the GitHub website.\n[3] Before you submit a pull request, check that it meets these guidelines:\n[4] Report bugs at (<https://github.com/identixone/fastapi_contrib/issues>)https://github.com/identixone/fastapi_contrib/issues.\n[5] The best way to send feedback is to file an issue at (<https://github.com/identixone/fastapi_contrib/issues>)https://github.com/identixone/fastapi_contrib/issues.\n[6] See GitHub Project (<https://github.com/identixone/fastapi_contrib/projects/2>)Roadmap."}]},"pdf_url":"/api/v1/static/MARCH_20/fastapi_contrib_readthedocs_io_en_latest.pdf"}